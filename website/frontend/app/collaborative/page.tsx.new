"use client";

import React, { useState, useEffect } from "react";
import { HoverEffect } from "@/components/ui/hover-effect";
import { TracingBeam } from "@/components/ui/tracing-beam";
import { 
  IconBook, 
  IconStar, 
  IconUsers, 
  IconUserCircle, 
  IconPackage,
  IconRefresh,
  IconThumbUp
} from "@tabler/icons-react";

// Define book type
interface Book {
  ISBN: string;
  Title: string;
  Author: string;
  Year?: number;
  Publisher?: string;
  ImageURL?: string;
  ImageUrlS?: string;
  ImageUrlM?: string;
  ImageUrlL?: string;
  Rating?: number;
  Genre?: string;
}

// Define rating item for guest mode
interface RatingItem {
  isbn: string;
  rating: number;
}

// Define book with user rating
interface BookWithRating extends Book {
  userRating: number;
}

export default function CollaborativeFilteringPage() {
  // Guest mode states
  const [popularBooks, setPopularBooks] = useState<BookWithRating[]>([]);
  const [guestRatings, setGuestRatings] = useState<Map<string, number>>(new Map());
  const [guestRecommendations, setGuestRecommendations] = useState<Book[]>([]);
  const [guestLoading, setGuestLoading] = useState(false);
  const [guestError, setGuestError] = useState<string | null>(null);
  const [hasGuestRecommendations, setHasGuestRecommendations] = useState(false);
  
  // Advanced mode states (hidden by default)
  const [advancedBooks, setAdvancedBooks] = useState<Book[]>([]);
  const [advancedLoading, setAdvancedLoading] = useState(false);
  const [advancedError, setAdvancedError] = useState<string | null>(null);
  const [userId, setUserId] = useState<string>("");
  const [method, setMethod] = useState<string>("user");
  const [hasAdvancedSearched, setHasAdvancedSearched] = useState(false);
  const [showAdvanced, setShowAdvanced] = useState(false);

  const handleGetRecommendations = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!userId.trim()) {
      setAdvancedError("Please enter a user ID");
      return;
    }
    
    setAdvancedLoading(true);
    setAdvancedError(null);
    setHasAdvancedSearched(true);
    
    try {
      const url = `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/collaborative-filtering?user_id=${userId}&method=${method}&limit=12`;
      
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`Error: ${response.status}`);
      }
      
      const data = await response.json();
      setAdvancedBooks(data);
      
      if (data.length === 0) {
        setAdvancedError(`No recommendations found for user ID: ${userId}`);
      }
    } catch (err) {
      console.error("Failed to fetch recommendations:", err);
      setAdvancedError("Failed to load recommendations. Please try again later.");
      // Use mock data for development if API is not available
      setAdvancedBooks(mockBooks);
    } finally {
      setAdvancedLoading(false);
    }
  };

  // Load popular books for guest rating on page load
  useEffect(() => {
    async function loadPopularBooks() {
      try {
        const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/popular-books?limit=12`);
        if (!response.ok) {
          throw new Error(`Error: ${response.status}`);
        }
        
        const data = await response.json();
        const booksWithRating = data.map((book: Book) => ({
          ...book,
          userRating: 0
        }));
        setPopularBooks(booksWithRating);
      } catch (err) {
        console.error("Failed to fetch popular books:", err);
        // Use mock data as fallback
        setPopularBooks(mockBooks.map(book => ({ ...book, userRating: 0 })));
      }
    }
    
    loadPopularBooks();
  }, []);

  // Handle guest rating a book
  const handleRateBook = (isbn: string, rating: number) => {
    setGuestRatings(prev => {
      const newRatings = new Map(prev);
      // If rating is 0, remove the rating
      if (rating === 0 && newRatings.has(isbn)) {
        newRatings.delete(isbn);
      } else if (rating > 0) {
        newRatings.set(isbn, rating);
      }
      return newRatings;
    });
    
    // Update the displayed rating in the UI
    setPopularBooks(prev => 
      prev.map(book => 
        book.ISBN === isbn ? { ...book, userRating: rating } : book
      )
    );
  };

  // Get recommendations based on guest ratings
  const handleGetGuestRecommendations = async () => {
    // Check if we have at least 3 ratings
    if (guestRatings.size < 3) {
      setGuestError("Please rate at least 3 books to get personalized recommendations");
      return;
    }
    
    setGuestLoading(true);
    setGuestError(null);
    
    try {
      // Prepare ratings data
      const ratingItems = Array.from(guestRatings.entries()).map(([isbn, rating]) => ({
        isbn,
        rating
      }));
      
      const requestData = {
        ratings: ratingItems,
        limit: 12
      };
      
      // Make API request
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/guest-recommendations`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestData)
      });
      
      if (!response.ok) {
        throw new Error(`Error: ${response.status}`);
      }
      
      const data = await response.json();
      setGuestRecommendations(data);
      setHasGuestRecommendations(true);
      
      if (data.length === 0) {
        setGuestError("No recommendations found based on your ratings");
      }
    } catch (err) {
      console.error("Failed to fetch guest recommendations:", err);
      setGuestError("Failed to load recommendations. Please try again later.");
      // Use mock data for development if API is not available
      setGuestRecommendations(mockBooks.slice(0, 6));
      setHasGuestRecommendations(true);
    } finally {
      setGuestLoading(false);
    }
  };

  // Reset guest mode
  const handleResetGuestRatings = () => {
    setGuestRatings(new Map());
    setPopularBooks(prev => prev.map(book => ({ ...book, userRating: 0 })));
    setGuestRecommendations([]);
    setHasGuestRecommendations(false);
    setGuestError(null);
  };

  // Toggle advanced mode
  const toggleAdvancedMode = () => {
    setShowAdvanced(prev => !prev);
  };

  return (
    <div className="min-h-screen bg-gray-950 text-gray-100 py-12 px-4 md:px-8 relative">
      <TracingBeam className="w-full max-w-6xl mx-auto">
        <div className="w-full mx-auto">
          {/* SECTION 1: Curated Just For You */}
          <h1 className="text-4xl font-bold mb-2 text-white">Curated Just For You</h1>
          <p className="text-lg text-gray-300 mb-8">
            Get personalized book recommendations based on what similar users have enjoyed.
          </p>
        
          {/* Guest Rating Mode */}
          <div className="bg-gray-900 border border-gray-800 rounded-xl p-6 mb-12 shadow-xl">
            <div className="mb-6">
              <p className="text-lg text-blue-400 mb-4 font-medium">
                Rate at least 3 books to see what our system recommends for you!
              </p>
              <p className="text-gray-300">
                Our collaborative filtering system will analyze your ratings and find books that similar readers have enjoyed.
              </p>
            </div>
          
            {!hasGuestRecommendations ? (
              <>
                <h3 className="text-lg font-medium mb-3 text-white">Popular Books to Rate</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
                  {popularBooks.map((book) => (
                    <div key={book.ISBN} className="border border-gray-700 rounded-lg p-4 flex gap-4 bg-gray-800">
                      <div className="flex-shrink-0 w-16 h-24 bg-gray-700 rounded flex items-center justify-center overflow-hidden">
                        {book.ImageUrlM || book.ImageUrlS ? (
                          <img 
                            src={book.ImageUrlM || book.ImageUrlS} 
                            alt={book.Title}
                            className="w-full h-full object-cover"
                          />
                        ) : (
                          <IconBook className="h-8 w-8 text-gray-400" />
                        )}
                      </div>
                      
                      <div className="flex-1">
                        <h4 className="font-medium text-sm mb-1 line-clamp-2 text-white">{book.Title}</h4>
                        <p className="text-xs text-gray-400 mb-1">{book.Author}</p>
                        <p className="text-xs text-gray-500 mb-2">{book.Genre || "Fiction"}</p>
                        
                        <div className="flex">
                          {[1, 2, 3, 4, 5].map((rating) => (
                            <button
                              key={rating}
                              onClick={() => handleRateBook(book.ISBN, book.userRating === rating ? 0 : rating)}
                              className={`h-6 w-6 ${book.userRating >= rating 
                                ? 'text-yellow-500' 
                                : 'text-gray-500'}`}
                              aria-label={`Rate ${rating} stars`}
                            >
                              <IconStar className="h-full w-full" fill={book.userRating >= rating ? "currentColor" : "none"} />
                            </button>
                          ))}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
                
                <div className="flex justify-between">
                  <button 
                    onClick={handleResetGuestRatings}
                    className="px-4 py-2 text-gray-300 border border-gray-700 hover:bg-gray-800 rounded-md flex items-center gap-2"
                    disabled={guestRatings.size === 0}
                  >
                    <IconRefresh className="h-4 w-4" />
                    <span>Reset Ratings</span>
                  </button>
                  
                  <button 
                    onClick={handleGetGuestRecommendations}
                    className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md flex items-center gap-2"
                    disabled={guestLoading || guestRatings.size < 3}
                  >
                    {guestLoading ? (
                      <>
                        <div className="h-4 w-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                        <span>Finding Books...</span>
                      </>
                    ) : (
                      <>
                        <IconThumbUp className="h-4 w-4" />
                        <span>Get Recommendations</span>
                      </>
                    )}
                  </button>
                </div>
                
                {guestError && (
                  <div className="mt-4 p-3 bg-red-900/30 text-red-400 rounded border border-red-800">
                    {guestError}
                  </div>
                )}
              </>
            ) : (
              <>
                <h3 className="text-lg font-medium mb-4 text-white">Your Personalized Recommendations</h3>
                
                {guestLoading ? (
                  <div className="text-center py-12">
                    <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]"></div>
                    <p className="mt-4">Generating personalized recommendations...</p>
                  </div>
                ) : guestError ? (
                  <div className="text-center py-6 text-red-400">
                    <p>{guestError}</p>
                  </div>
                ) : (
                  <>
                    <HoverEffect 
                      items={guestRecommendations.map(book => ({
                        title: book.Title,
                        description: `by ${book.Author}${book.Year ? ` (${book.Year})` : ''}`,
                        link: "#",
                        image: book.ImageUrlL || book.ImageUrlM || book.ImageUrlS || "",
                        rating: book.Rating
                      }))} 
                    />
                    
                    <div className="flex justify-center mt-8">
                      <button 
                        onClick={handleResetGuestRatings}
                        className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md flex items-center gap-2"
                      >
                        <IconRefresh className="h-4 w-4" />
                        <span>Rate Different Books</span>
                      </button>
                    </div>
                  </>
                )}
              </>
            )}
          </div>
          
          {/* SECTION 2: About Collaborative Filtering */}
          <h1 className="text-4xl font-bold mt-16 mb-6 text-white">About Collaborative Filtering Recommendation</h1>
          
          <div className="bg-gray-900 border border-gray-800 rounded-xl p-6 mb-8 shadow-xl">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
              <div className="flex flex-col p-4 bg-gray-800 rounded-lg">
                <IconUserCircle className="h-12 w-12 text-blue-400 mb-4" />
                <h3 className="text-lg font-medium mb-2 text-white">User-Based Filtering</h3>
                <p className="text-gray-300">
                  Recommends books based on what similar users have liked. The system finds users with similar taste to you and suggests books they've enjoyed.
                </p>
              </div>
              
              <div className="flex flex-col p-4 bg-gray-800 rounded-lg">
                <IconPackage className="h-12 w-12 text-blue-400 mb-4" />
                <h3 className="text-lg font-medium mb-2 text-white">Item-Based Filtering</h3>
                <p className="text-gray-300">
                  Recommends books similar to ones you've already liked. The system analyzes patterns in book ratings to find books that are frequently liked together.
                </p>
              </div>
            </div>
            
            <div className="mt-6 bg-blue-900/30 p-6 rounded-lg border border-blue-800">
              <h3 className="text-xl font-medium mb-4 text-blue-300">How Guest Recommendations Work</h3>
              <p className="text-gray-300 mb-4">
                When you rate books in the guest mode, our system:
              </p>
              <ol className="list-decimal list-inside space-y-3 text-gray-300">
                <li>Compares your ratings with thousands of other users in our database</li>
                <li>Identifies users with similar reading preferences</li>
                <li>Recommends books those similar users enjoyed but you haven't rated yet</li>
                <li>Ranks these recommendations based on predicted enjoyment level</li>
              </ol>
              <p className="mt-4 text-gray-300">
                This allows us to offer personalized recommendations even if you're not in our user database!
              </p>
            </div>
          </div>
          
          {/* Advanced Mode Toggle */}
          <div className="flex justify-center mb-8">
            <button
              onClick={toggleAdvancedMode}
              className="px-4 py-2 text-gray-300 border border-gray-700 hover:bg-gray-800 rounded-md"
            >
              {showAdvanced ? "Hide Advanced Mode" : "Show Advanced Mode"}
            </button>
          </div>
          
          {/* Advanced Mode - Only show if toggled */}
          {showAdvanced && (
            <div className="bg-gray-900 border border-gray-800 rounded-xl p-6 mb-8 shadow-xl">
              <h2 className="text-xl font-semibold mb-4 text-white">Advanced Mode: Specific User Recommendations</h2>
              <p className="text-gray-300 mb-4">
                For demonstration purposes, you can also view recommendations for specific users in our database.
              </p>
              
              <form onSubmit={handleGetRecommendations} className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-2 text-gray-300">User ID</label>
                    <div className="relative">
                      <input 
                        type="text" 
                        className="w-full p-2 pl-10 border border-gray-700 rounded-md bg-gray-800 text-white"
                        placeholder="e.g., 276725"
                        value={userId}
                        onChange={(e) => setUserId(e.target.value)}
                      />
                      <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                        <IconUserCircle className="h-4 w-4 text-gray-500" />
                      </div>
                    </div>
                    <p className="text-xs text-gray-500 mt-1">
                      For demo purposes, try user IDs: 276725, 276726, 276727
                    </p>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium mb-2 text-gray-300">Recommendation Method</label>
                    <select 
                      className="w-full p-2 border border-gray-700 rounded-md bg-gray-800 text-white"
                      value={method}
                      onChange={(e) => setMethod(e.target.value)}
                    >
                      <option value="user">User-Based</option>
                      <option value="item">Item-Based</option>
                    </select>
                  </div>
                </div>
                
                <div className="flex justify-end">
                  <button 
                    type="submit"
                    className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md flex items-center gap-2"
                    disabled={advancedLoading}
                  >
                    {advancedLoading ? (
                      <>
                        <div className="h-4 w-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                        <span>Finding Books...</span>
                      </>
                    ) : (
                      <>
                        <IconUsers className="h-4 w-4" />
                        <span>Get Recommendations</span>
                      </>
                    )}
                  </button>
                </div>
              </form>
              
              {/* Advanced Results */}
              {hasAdvancedSearched && (
                <div className="mt-8">
                  <h2 className="text-2xl font-semibold mb-4 text-white">
                    {advancedLoading ? "Finding Books..." : 
                     advancedError ? "Recommendation Results" : 
                     `Recommended Books for User ${userId}`}
                  </h2>
                  
                  {advancedLoading ? (
                    <div className="text-center py-12">
                      <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]"></div>
                      <p className="mt-4">Generating personalized recommendations...</p>
                    </div>
                  ) : advancedError ? (
                    <div className="text-center py-12 text-red-400">
                      <p>{advancedError}</p>
                    </div>
                  ) : (
                    <HoverEffect items={advancedBooks.map(book => ({
                      title: book.Title,
                      description: `by ${book.Author}${book.Year ? ` (${book.Year})` : ''}`,
                      link: "#",
                      image: book.ImageUrlL || book.ImageUrlM || book.ImageUrlS || "",
                      rating: book.Rating
                    }))} />
                  )}
                </div>
              )}
            </div>
          )}
        </div>
      </TracingBeam>
    </div>
  );
}

// Mock data for development with diverse genres
const mockBooks: Book[] = [
  // Fantasy
  {
    ISBN: "0439554934",
    Title: "Harry Potter and the Sorcerer's Stone",
    Author: "J.K. Rowling",
    Year: 1997,
    Publisher: "Scholastic",
    Rating: 4.7,
    Genre: "Fantasy",
    ImageUrlS: "http://images.amazon.com/images/P/0439554934.01.THUMBZZZ.jpg",
    ImageUrlM: "http://images.amazon.com/images/P/0439554934.01.MZZZZZZZ.jpg",
    ImageUrlL: "http://images.amazon.com/images/P/0439554934.01.LZZZZZZZ.jpg"
  },
  {
    ISBN: "0618260307",
    Title: "The Hobbit",
    Author: "J.R.R. Tolkien",
    Year: 1937,
    Publisher: "Houghton Mifflin",
    Rating: 4.6,
    Genre: "Fantasy",
    ImageUrlS: "http://images.amazon.com/images/P/0618260307.01.THUMBZZZ.jpg",
    ImageUrlM: "http://images.amazon.com/images/P/0618260307.01.MZZZZZZZ.jpg",
    ImageUrlL: "http://images.amazon.com/images/P/0618260307.01.LZZZZZZZ.jpg"
  },
  // Mystery/Thriller
  {
    ISBN: "0385504209",
    Title: "The Da Vinci Code",
    Author: "Dan Brown",
    Year: 2003,
    Publisher: "Doubleday",
    Rating: 4.1,
    Genre: "Mystery",
    ImageUrlS: "http://images.amazon.com/images/P/0385504209.01.THUMBZZZ.jpg",
    ImageUrlM: "http://images.amazon.com/images/P/0385504209.01.MZZZZZZZ.jpg",
    ImageUrlL: "http://images.amazon.com/images/P/0385504209.01.LZZZZZZZ.jpg"
  },
  {
    ISBN: "0316769487",
    Title: "The Girl on the Train",
    Author: "Paula Hawkins",
    Year: 2015,
    Publisher: "Riverhead Books",
    Rating: 4.0,
    Genre: "Thriller",
    ImageUrlS: "http://images.amazon.com/images/P/0316769487.01.THUMBZZZ.jpg"
  },
  // Literary Fiction
  {
    ISBN: "0061120081",
    Title: "To Kill a Mockingbird",
    Author: "Harper Lee",
    Year: 1960,
    Publisher: "HarperCollins",
    Rating: 4.8,
    Genre: "Literary Fiction",
    ImageUrlS: "http://images.amazon.com/images/P/0061120081.01.THUMBZZZ.jpg",
    ImageUrlM: "http://images.amazon.com/images/P/0061120081.01.MZZZZZZZ.jpg",
    ImageUrlL: "http://images.amazon.com/images/P/0061120081.01.LZZZZZZZ.jpg"
  },
  {
    ISBN: "0679783261",
    Title: "Pride and Prejudice",
    Author: "Jane Austen",
    Year: 1813,
    Publisher: "Penguin Books",
    Rating: 4.4,
    Genre: "Literary Fiction",
    ImageUrlS: "http://images.amazon.com/images/P/0679783261.01.THUMBZZZ.jpg",
    ImageUrlM: "http://images.amazon.com/images/P/0679783261.01.MZZZZZZZ.jpg",
    ImageUrlL: "http://images.amazon.com/images/P/0679783261.01.LZZZZZZZ.jpg"
  },
  // Science Fiction
  {
    ISBN: "0553293354",
    Title: "Foundation",
    Author: "Isaac Asimov",
    Year: 1951,
    Publisher: "Bantam Spectra",
    Rating: 4.3,
    Genre: "Science Fiction",
    ImageUrlS: "http://images.amazon.com/images/P/0553293354.01.THUMBZZZ.jpg"
  },
  {
    ISBN: "0441172717",
    Title: "Dune",
    Author: "Frank Herbert",
    Year: 1965,
    Publisher: "Ace Books",
    Rating: 4.5,
    Genre: "Science Fiction",
    ImageUrlS: "http://images.amazon.com/images/P/0441172717.01.THUMBZZZ.jpg"
  },
  // Romance
  {
    ISBN: "0316769177",
    Title: "The Notebook",
    Author: "Nicholas Sparks",
    Year: 1996,
    Publisher: "Warner Books",
    Rating: 4.1,
    Genre: "Romance",
    ImageUrlS: "http://images.amazon.com/images/P/0316769177.01.THUMBZZZ.jpg",
    ImageUrlM: "http://images.amazon.com/images/P/0316769177.01.MZZZZZZZ.jpg",
    ImageUrlL: "http://images.amazon.com/images/P/0316769177.01.LZZZZZZZ.jpg"
  },
  {
    ISBN: "0142001740",
    Title: "The Secret Life of Bees",
    Author: "Sue Monk Kidd",
    Year: 2002,
    Publisher: "Penguin Books",
    Rating: 4.2,
    Genre: "Historical Fiction",
    ImageUrlS: "http://images.amazon.com/images/P/0142001740.01.THUMBZZZ.jpg",
    ImageUrlM: "http://images.amazon.com/images/P/0142001740.01.MZZZZZZZ.jpg",
    ImageUrlL: "http://images.amazon.com/images/P/0142001740.01.LZZZZZZZ.jpg"
  },
  // Non-fiction
  {
    ISBN: "0743273567",
    Title: "The Tipping Point",
    Author: "Malcolm Gladwell",
    Year: 2000,
    Publisher: "Little, Brown",
    Rating: 4.3,
    Genre: "Non-fiction",
    ImageUrlS: "http://images.amazon.com/images/P/0743273567.01.THUMBZZZ.jpg"
  },
  {
    ISBN: "0307277674",
    Title: "Sapiens: A Brief History of Humankind",
    Author: "Yuval Noah Harari",
    Year: 2011,
    Publisher: "Harper",
    Rating: 4.7,
    Genre: "Non-fiction",
    ImageUrlS: "http://images.amazon.com/images/P/0307277674.01.THUMBZZZ.jpg"
  }
];
